<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 架构笔记</title>
    <link>https://huanwei.github.io/posts/</link>
    <description>Recent content in Posts on 架构笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Sep 2018 23:44:13 +0800</lastBuildDate>
    
	<atom:link href="https://huanwei.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design of Rocketmq Operator</title>
      <link>https://huanwei.github.io/posts/design-of-rocketmq-operator/</link>
      <pubDate>Mon, 10 Sep 2018 23:44:13 +0800</pubDate>
      
      <guid>https://huanwei.github.io/posts/design-of-rocketmq-operator/</guid>
      <description>设计目标 Kubernetes PaaS 环境下，可伸缩(auto-scale)、可自愈（self-healing）的 RocketMQ Clusters 运维。
背景与踩坑 RocketMQ 的集群有它自己的集群管理模式，简单来说，关键有以下几点：
1）RocketMQ Namesrv 是一个无状态的集群；
2）RocketMQ Broker 是一个有状态的集群，根据主备模式及 Replication Mode，总的来说可分为三种： all-master 模式、sync/async master-slave 模式。
3）Broker 依赖于 Namesrv，Broker启动时需要知道 Namesrv 的地址列表；
4) 其中很容易想到的一点是：既然 Namesrv 是一个无状态的服务，那么在同一个集群内可否将 Namesrv 服务地址（即 service name/namespace）配置给 Broker ？答案是不行，至少目前 RocketMQ 不支持这种方式，经实验，当 Namesrv 仅有一个replica时，可以这样配置，但是当其有多个replica时，这样配置后使用mqadmin得到的clusterList信息并不保证一致。
设计思路 经过上述背景分析、并设计了几个yaml文件进行踩坑之后，简单设计如下：
1）首先给节点打label，意图是集群各组件节点可按 nodeSelector 启动，便于开发测试，另外一个意图是私有化场景下，后续的存储或许可往Local Volume方式迁移；
2）集群首先部署Namesrv集群，一个deployment配置多个replica即可，暂且以NodePort方式为后续的Broker集群服务；
3) 设计BrokerCluster CRD，托管多组Broker StatefulSet及其headless service，通过一个Cluster Controller，使得headless service以及StatefulSet创建时，通过环境变量的方式，给预先埋在Broker镜像中的脚本程序传值，以此为各Broker容器动态生成 上述各集群模式中最为关键broker.conf配置文件，即可；
4）存储暂且先用hostPath，各实例的路径以Statefulset index区分。
具体实现 具体实现见代码 rocketmq-operator
可优化点 假如考虑Namesrv和Broker都处于同一个Kubernetes集群内，那么可以自动创建Namesrv deployment，然后Broker启动前获取Namesrv endpoints列表，并list-watch该Namesrv endpoints列表；
只不过当Namesrv endpoints列表的list-watch信息发生变动时，此时各Broker实例就需要靠rolling-update逐个重启以刷新存放于Broker内存的配置，这是由于RocketMQ集群方式导致，并不很友好。</description>
    </item>
    
    <item>
      <title>TestCase</title>
      <link>https://huanwei.github.io/posts/testcase/</link>
      <pubDate>Wed, 05 Sep 2018 14:06:47 +0800</pubDate>
      
      <guid>https://huanwei.github.io/posts/testcase/</guid>
      <description>this is only a test case.
java code /* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements. See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the &amp;quot;License&amp;quot;); you may not use this file except in compliance with * the License.</description>
    </item>
    
    <item>
      <title>kubeadm源码分析</title>
      <link>https://huanwei.github.io/posts/kubeadm/</link>
      <pubDate>Thu, 22 Dec 2016 19:44:35 +0800</pubDate>
      
      <guid>https://huanwei.github.io/posts/kubeadm/</guid>
      <description>这两天分析了一下Kubernetes中kubeadm模块的源码。
说明 以下源码分析基于 kubernetes v1.5.1 版本（目前的最新版本，released 8 days ago），与其他版本不一定一致。
阅读对象 熟悉kubernetes基本原理、对源码有一定追求的技术人。
一、程序主入口分析 看代码目录结构，可以看到1.5版本以上的kubernetes源码已经包含了kubeadm； kubeadm源码位于其中cmd包下的kubeadm目录； 其中的/cmd/kuberadm/kubeadm.go是程序的主入口； 程序主要片段及注释：
package main import ... （略） func main() { if err := app.Run(); err != nil { //主程序入口 fmt.Printf(util.AlphaWarningOnExit) os.Exit(1) } os.Exit(0) }  kubeadm.go只有一个main()函数，它执行app.Run()，app包里的Run()则定义在另一个/kubeadm/app/kubeadm.go里，它调用cmd包下的NewKubeadmCommand() 来创建新的Kubeadm命令，并调用cmd.Execute() 使之生效；
程序主要片段及注释：
package app import ... （略） func Run() error { logs.InitLogs() defer logs.FlushLogs() // We do not want these flags to show up in --help pflag.CommandLine.MarkHidden(&amp;quot;google-json-key&amp;quot;) pflag.CommandLine.MarkHidden(&amp;quot;log-flush-frequency&amp;quot;) //主要工作： //调用cmd包下的NewKubeadmCommand()来创建新的Kubeadm命令 cmd := cmd.</description>
    </item>
    
  </channel>
</rss>